name: CI Health Monitor

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      create_issues:
        description: 'Create GitHub issues for critical failures'
        type: boolean
        default: false
  push:
    paths:
      - 'scripts/ci_status_monitor.py'
      - '.github/workflows/ci-health-monitor.yml'

permissions:
  contents: write
  issues: write
  pages: write
  id-token: write

jobs:
  monitor-ci-health:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # No external dependencies needed - uses only stdlib
        
    - name: Generate CI Health Report
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/ci_status_monitor.py \
          --format all \
          --limit 200 \
          --output-dir web/
        
        # Also generate a compact status for README
        python scripts/ci_status_monitor.py \
          --format json \
          --limit 50 \
          --output-dir .
        
        # Create a status summary for GitHub Pages
        echo "# CI/CD Pipeline Health" > web/ci_status.md
        echo "" >> web/ci_status.md
        echo "🔗 **[View Full Dashboard](./ci_dashboard.html)**" >> web/ci_status.md
        echo "" >> web/ci_status.md
        python scripts/ci_status_monitor.py --format console >> web/ci_status.md
        
    - name: Create Issues for Critical Failures
      if: github.event.inputs.create_issues == 'true' || (github.event_name == 'schedule' && github.ref == 'refs/heads/main')
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
        import json
        import subprocess
        import sys
        from datetime import datetime
        
        # Load the CI report
        with open('web/ci_report.json') as f:
            report = json.load(f)
        
        # Find workflows with critical issues
        critical_workflows = []
        for name, workflow in report['workflows'].items():
            if workflow['critical_issues'] and workflow['failure_rate'] > 0.5:
                critical_workflows.append((name, workflow))
        
        print(f'Found {len(critical_workflows)} workflows with critical issues')
        
        for workflow_name, workflow in critical_workflows:
            # Check if issue already exists
            try:
                result = subprocess.run([
                    'gh', 'issue', 'list', 
                    '--search', f'CI Failure: {workflow_name}',
                    '--state', 'open',
                    '--json', 'title'
                ], capture_output=True, text=True, check=True)
                
                existing_issues = json.loads(result.stdout)
                if existing_issues:
                    print(f'Issue already exists for {workflow_name}, skipping')
                    continue
                    
            except subprocess.CalledProcessError:
                pass
            
            # Create new issue
            title = f'CI Failure: {workflow_name} - {workflow[\"failure_rate\"]:.1%} failure rate'
            
            body = f'''## 🚨 Critical CI/CD Failure Detected
        
**Workflow:** `{workflow_name}`
**Failure Rate:** {workflow['failure_rate']:.1%} ({workflow['failures']}/{workflow['total_runs']} runs)
**Trend:** {workflow['trend']} {'📉' if workflow['trend'] == 'degrading' else '📈' if workflow['trend'] == 'improving' else '➡️'}

### Critical Issues:
{chr(10).join(f'- {issue}' for issue in workflow['critical_issues'])}

### Latest Run:
- **Status:** {workflow['latest_run']['conclusion'] if workflow['latest_run'] else 'Unknown'}
- **URL:** {workflow['latest_run']['url'] if workflow['latest_run'] else 'N/A'}
- **Age:** {workflow['latest_run']['age_hours']:.1f} hours ago

### Next Steps:
1. 🔍 [Review the full CI dashboard](../../web/ci_dashboard.html)
2. 🐛 Investigate the root cause of failures
3. 🛠️ Fix the underlying issues
4. ✅ Monitor for improvement

### Auto-generated by CI Health Monitor
Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}

/label bug,ci,priority-high
'''
            
            try:
                subprocess.run([
                    'gh', 'issue', 'create',
                    '--title', title,
                    '--body', body,
                    '--label', 'bug,ci,priority-high'
                ], check=True)
                print(f'✅ Created issue for {workflow_name}')
                
            except subprocess.CalledProcessError as e:
                print(f'❌ Failed to create issue for {workflow_name}: {e}')
        "
        
    - name: Update Repository Status Badge
      run: |
        # Generate a dynamic status badge
        python -c "
        import json
        
        with open('web/ci_report.json') as f:
            report = json.load(f)
        
        total = report['summary']['total_workflows']
        healthy = report['summary']['healthy_workflows']
        health_pct = (healthy / total * 100) if total > 0 else 0
        
        if health_pct >= 80:
            color = 'green'
            status = 'healthy'
        elif health_pct >= 60:
            color = 'yellow' 
            status = 'degraded'
        else:
            color = 'red'
            status = 'critical'
        
        # Create badge data
        badge_data = {
            'schemaVersion': 1,
            'label': 'CI Health',
            'message': f'{healthy}/{total} workflows ({health_pct:.0f}%)',
            'color': color
        }
        
        with open('web/ci_health_badge.json', 'w') as f:
            json.dump(badge_data, f, indent=2)
        
        print(f'✅ Generated health badge: {status} ({health_pct:.0f}%)')
        "
        
    - name: Commit and Push Updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "CI Health Monitor"
        
        git add web/ci_dashboard.html web/ci_report.json web/ci_status.md web/ci_health_badge.json
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "🤖 Update CI health dashboard and reports
          
          - Updated CI dashboard with latest pipeline status
          - Generated comprehensive failure analysis  
          - Health: $(python -c "
            import json
            with open('web/ci_report.json') as f:
                report = json.load(f)
            healthy = report['summary']['healthy_workflows']  
            total = report['summary']['total_workflows']
            print(f'{healthy}/{total} workflows healthy')
          ")
          
          Co-Authored-By: GitHub Actions <noreply@github.com>"
          
          git push
        fi
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./web
        destination_dir: ci-dashboard
        
    - name: Summary Report
      run: |
        echo "## 🚀 CI Health Monitor Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        python -c "
        import json
        with open('web/ci_report.json') as f:
            report = json.load(f)
        
        total = report['summary']['total_workflows']
        healthy = report['summary']['healthy_workflows']
        critical = report['summary']['total_critical_issues']
        
        health_pct = (healthy / total * 100) if total > 0 else 0
        
        print(f'### 📊 Overall Health: {health_pct:.1f%}')
        print(f'- ✅ **Healthy Workflows:** {healthy}/{total}')
        print(f'- 🚨 **Critical Issues:** {critical}')
        print(f'- 📈 **Runs Analyzed:** {len(report.get(\"workflows\", {}))}')
        print()
        print('### 🔗 Quick Links')
        print('- [📊 Full Dashboard](../ci-dashboard/ci_dashboard.html)')
        print('- [📄 JSON Report](../ci-dashboard/ci_report.json)')
        print('- [📝 Status Summary](../ci-dashboard/ci_status.md)')
        print()
        print('### ⚠️ Top Issues')
        
        # Find worst workflows
        workflows = [(name, w) for name, w in report['workflows'].items() if w['critical_issues']]
        workflows.sort(key=lambda x: (len(x[1]['critical_issues']), x[1]['failure_rate']), reverse=True)
        
        for i, (name, w) in enumerate(workflows[:5]):
            emoji = '❌' if w['failure_rate'] > 0.5 else '🟡'
            print(f'{i+1}. {emoji} **{name}** - {w[\"failure_rate\"]:.1%} failure rate')
            for issue in w['critical_issues'][:2]:  # Show first 2 issues
                print(f'   - {issue}')
        " >> $GITHUB_STEP_SUMMARY